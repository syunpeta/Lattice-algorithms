using LinearAlgebra
include("utils.jl")

function return_r(k::Int64,r0::Int64,r::Array{Int64})
    if k == 0
        return r0
    else
        return r[k]
    end
end


function Enumeration(B::Matrix{Int64},R::Float64,g::Int64,h::Int64)
    N,_ = size(B)
    BB,mu = GSO(B,N)
    BB_norm = zeros(Float64,N)
    for i in 1:N
        BB_norm[i] = norm(BB[i,:])^2
    end
  
    BB,mu = GSO(B,N)
    sigma = zeros(Float64,N+1,N)
    r = [i for i in 1:N]
    r0 = 0
    rho = zeros(Float64,N+1)
    v = zeros(Int64,N)
    c = zeros(Float64,N)
    w = zeros(Int64,N)
    v[g+1] = 1
    last_nonzero = 1
    k = g+1
    flag = 0
    v1 = zeros(Int64,N)

    while true
        print(k)
        rho[k] = rho[k+1] + ((v[k]-c[k])^2)*BB_norm[k]
        if rho[k] <= R
            if k == g+1
                R = 0.99*rho[k]
                flag +=1
                for i in 1:N
                    v1[i] = v[i]
                end
            end
            k = k-1
            ##r
            if k== 1
                r0 = max(r0,r[k])
            else
                r[k-1] = max(r[k-1],r[k])
            end
            ##
            for i in return_r(k,r0,r):-1:(k+1)
                sigma[i,k] = sigma[i+1,k] + mu[i,k]*v[i]
            end
            c[k] = -sigma[k+1,k]
            v[k] = round(c[k])
            w[k] = 1

        else
            k = k+1
            if k == h+1
                if flag == 0
                    return false
                else
                    vv = v1[g] * B[g,:]
                    for i in g+1:h
                        vv += v1[i]*B[i,:]
                    end
                    return vv
                end
            end
             ##r
            if k==1
                r0 = 1
            else
                r[k-1] = k
            end
            ##

            if k >= last_nonzero
                last_nonzero = k
                v[k] = v[k]+1
            else
                if v[k] > c[k]
                    v[k] = v[k] - w[k]
                else
                    v[k] = v[k] + w[k]
                end
                w[k] = w[k] + 1
            end
        end
    end
end

#=
BB = [-1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ;0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ;0 1 0 1 -1 -1 -1 -1 -1 -1 0 2 0 0 -1 0 -1 0 0 1 0 0 0 0 0 0 1 1 0 -1 0 -1 ;0 0 -1 0 -1 1 1 1 1 1 1 0 -2 0 0 1 1 1 0 0 -1 0 0 0 0 0 0 -1 -1 0 1 0 ;0 1 -1 1 -1 -1 1 -1 -1 1 0 1 -1 0 0 0 0 1 -1 1 0 -1 1 0 -1 1 1 -1 0 0 0 -1 ;0 0 0 1 -1 1 -1 -1 1 -1 -1 1 0 1 -1 0 0 -1 0 1 -1 1 0 -1 1 0 -1 1 1 -1 0 0 ;1 0 1 -1 -1 -1 -1 -1 -1 0 2 0 0 -1 0 0 0 0 1 0 0 0 0 0 0 1 1 0 -1 0 -1 -1 ;-1 0 0 0 -1 -1 -1 -1 0 1 0 1 0 1 -1 -2 0 1 0 1 1 0 0 -1 0 0 0 0 0 0 -1 -1 ;0 1 0 0 -1 0 -1 1 1 1 1 1 1 0 -2 0 1 0 1 1 0 0 -1 0 0 0 0 0 0 -1 -1 0 ;0 0 -1 0 0 0 1 1 -1 1 -1 1 -2 -1 1 1 -1 1 0 -1 0 -1 1 0 0 0 0 0 -1 0 1 1 ;-2 -1 0 0 0 -1 -1 -1 -1 0 1 0 1 0 1 -1 -1 0 1 0 1 1 0 0 -1 0 0 0 0 0 0 -1 ;-1 -1 -1 0 2 0 0 -1 0 0 1 0 1 -1 -1 -1 0 0 0 1 1 0 -1 0 -1 -1 0 0 1 0 0 0 ;2 1 1 -1 -1 0 1 0 -1 -1 0 1 2 0 0 0 0 -1 0 0 0 0 1 0 0 1 0 0 0 0 -1 0 ;0 0 -1 -1 1 -1 1 -1 2 1 -1 -1 0 0 1 0 0 1 -1 0 0 0 0 0 1 0 -1 -1 1 -1 0 1 ;0 -2 0 -2 1 0 -1 1 0 0 0 0 0 1 -1 0 0 0 0 0 1 0 0 0 1 -2 0 0 -1 1 -1 1 ;0 1 2 0 0 0 2 1 1 -1 -1 0 1 0 -1 -1 0 0 0 0 -1 0 0 -1 0 0 0 0 1 0 0 1 ;-3 -12 13 -12 2 -1 16 0 -8 15 0 -6 -5 10 -12 5 -1 -5 0 1 -2 -5 0 14 -4 4 -5 23 5 -19 7 -13 ;16 -2 -8 15 0 -6 -5 13 -11 4 -3 -13 11 -12 1 0 1 14 -4 4 -6 22 5 -18 7 -15 0 -5 -2 2 -1 -4 ;-1 -8 16 -1 -7 -6 12 -12 3 -3 -11 11 -12 0 0 16 14 -4 5 -6 22 5 -18 7 -15 1 -4 -2 1 -1 -5 0 ;-8 17 -1 -7 -5 13 -12 5 -4 -11 12 -14 1 0 16 1 -3 4 -6 21 5 -18 6 -13 0 -4 -1 0 -1 -4 0 14 ;11 -4 3 13 -11 12 -1 0 -16 2 8 -15 0 6 5 -13 -7 15 0 5 2 -2 1 4 -1 -14 4 -4 6 -22 -5 18 ;-13 9 5 -3 -2 5 -4 1 1 3 13 -1 -3 -3 0 -14 -12 -25 -19 13 10 -9 0 2 16 14 3 -10 -14 -3 16 18 ;16 12 4 7 -7 -4 -3 5 -7 2 -5 -15 -3 -11 3 2 -15 -4 7 31 12 9 -4 -10 7 -16 -16 -19 -4 11 13 -2 ;-1 16 0 -7 17 0 -7 -5 11 -12 3 -4 -13 13 -13 2 -5 0 13 -4 4 -6 22 5 -18 6 -13 0 -4 0 1 -1 ;-1 1 -16 0 8 -16 1 8 5 -12 12 -4 4 12 -12 15 1 4 0 -14 3 -4 6 -21 -5 18 -6 13 0 4 1 0 ;-4 3 11 -13 14 -1 2 -16 1 8 -15 0 6 4 -12 12 14 1 4 1 -1 1 4 0 -14 3 -4 5 -22 -5 19 -6 ;-11 -2 8 -1 -9 8 -3 -19 22 -1 -18 21 11 -19 -2 16 -1 4 6 -9 1 -8 -7 12 5 -3 2 -14 -6 31 0 -13 ;-11 12 -4 3 13 -10 13 0 1 -16 1 8 -16 0 5 6 19 -7 14 0 4 1 -2 1 5 -1 -14 4 -4 6 -22 -4 ;2 11 -4 -1 -15 -14 -5 -8 7 4 3 -6 7 -4 4 15 4 -11 -13 3 15 3 -8 -30 -13 -9 5 10 -6 15 16 19 ;13 -10 13 0 1 -16 1 8 -16 0 5 6 -11 12 -4 3 4 1 -2 1 5 -1 -14 4 -4 6 -22 -4 19 -7 14 0 ;-6 3 -7 -1 5 18 -12 1 10 -17 6 6 -2 5 6 -14 -21 14 -14 -8 -25 -14 -4 8 -20 9 -6 -9 -11 -8 -30 8 ;-19 13 -1 -9 17 -6 -6 1 -6 -6 12 4 -2 6 2 -6 14 3 -8 19 -9 6 9 11 7 32 -9 21 -12 14 8 25 ;]
for i in 1:32
    print("[")
    for j in 1:32
        print(string(BB[i,j]) ,",")
    end
    print("],")
end
k = 4
l = 8
h = 9
z = 4
R=14.1502617801047

println(Enumeration(BB,R,k,l))

v = [1, 0, 1, -1, -1, -1, -1, -1, -1, 0, 2, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, -1, 0, -1, -1]
=#